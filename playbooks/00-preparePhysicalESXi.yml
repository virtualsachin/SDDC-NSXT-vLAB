##
##    Project: SDDC-NSXT-LAB
##    Authors: Sachin Kumar Sharma
##   Filename: playbooks/00-preparePhysicalESXi.yml
##    Purpose: This Ansbile script is to prepare the physical environment, which includes:
##              a) Creating vSphere Switch (vDS or vSS)
##              b) Creating vSphere Port-Groups Trunk
##              c) VM Folder Structure (vCenter Deployment Only)
##
---
- name: Prepare Physical ESXi host for Virtual LAB and create Infrastructre Portgroups
  hosts: localhost
  gather_facts: False
  vars_files:
    - ../answerfile.yml
  tasks:
    - name: preparePhysical_Playbook
      ansible.builtin.debug:
        msg: "Starting playbook: {{ ansible_play_name }}"

##
###############################################################################################################
##                                  vSphere Distributed Switch Deployment                                    ##
##                                                                                                           ##
###############################################################################################################
##

    - name: Attempt to create Pod vDS on physical vCenter
      community.vmware.vmware_dvswitch:
        hostname: "{{ vCSA.fqdn }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        validate_certs: no
        datacenter_name: "{{ vCSA.datacenter }}"
        switch_name: "{{ physicalESXi.phy_vds }}"
        uplink_quantity: 2
        discovery_operation: both
        discovery_protocol: lldp
        mtu: 9000
        state: present
      register: vds_result
## if vDS was created, vds_result.result == "DVS created"
    - name: DEBUG -- Display vds_result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================
          Variable: vds_result
          ====================
          {{ vds_result | to_nice_yaml }}
          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true

    - name: Authenticate to vCenter to obtain a Session ID
      ansible.builtin.uri:
        url: "https://{{ vCSA.fqdn }}/rest/com/vmware/cis/session"
        headers: "{ 'vmware-use-header-authn':'test' }"
        method: POST
        validate_certs: no
        timeout: 10
        force_basic_auth: yes
        url_username: "{{ vCSA.user }}"
        url_password: "{{ vCSA.password }}"
        body_format: json
        return_content: yes
        status_code: 200
      register: vcenter_auth_result
    - name: DEBUG -- Display vcenter_auth_result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================
          Variable: vcenter_auth_result
          =============================
          {{ vcenter_auth_result | to_nice_yaml }}
          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - vcenter_auth_result is defined
    - name: Store vCenter Session ID for later use
      ansible.builtin.set_fact:
        vCenter_SessionID: "{{ vcenter_auth_result.json.value | default(None) }}"

    - name: DEBUG -- Display vCenter_SessionID
      ansible.builtin.pause:
        seconds: 1
        prompt: |
          =================================================================================================
          Variable: vCenter_SessionID
          ===========================
          {{ vCenter_SessionID | to_nice_yaml }}
          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - vCenter_SessionID is defined

##
## At this point, the vDS exists, so we can now create our PortGroups on it
##

    - name: Create a Management Distributed Port-Group in vCenter
      community.vmware.vmware_dvs_portgroup:
        hostname: "{{ vCSA.fqdn }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        validate_certs: no
        switch_name: "{{ physicalESXi.phy_vds }}"
        portgroup_type: earlyBinding
        portgroup_name: "{{ physicalESXi.pg_mgmt }}"
        vlan_id: "{{ physicalESXi.pg_mgmt_vlan}}"
        vlan_trunk: false
        num_ports: 32
        state: present
        network_policy:
          promiscuous: true                                                                            # Must be true in order for NSX-T Edge Transport Node deployment to succeed
          forged_transmits: true                                                                       # Must be true in order for NSX-T Edge Transport Node deployment to succeed
          mac_changes: false
    - name: Create a Trunk Distributed Port-Group in vCenter
      community.vmware.vmware_dvs_portgroup:
        hostname: "{{ vCSA.fqdn }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        validate_certs: no
        switch_name: "{{ physicalESXi.phy_vds }}"
        portgroup_type: earlyBinding
        portgroup_name: "{{ physicalESXi.pg_trunk }}"
        vlan_id: "{{ physicalESXi.pg_trunk_vlan }}"
        vlan_trunk: true
        num_ports: 32
        state: present
        network_policy:
          promiscuous: true                                                                            # Must be true in order for vmk migration to succeed
          forged_transmits: true                                                                       # Must be true in order for vmk migration to succeed
          mac_changes: false

##
###############################################################################################################
##                                  Create VM Folder Structure in vCenter Server                             ##
##                                                                                                           ##
###############################################################################################################
##


    - name: Create Parent VM Folder
      community.vmware.vcenter_folder:
        hostname: "{{ vCSA.fqdn }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        validate_certs: no
        datacenter: "{{ vCSA.datacenter }}"
        folder_type: vm
        parent_folder: ""
        folder_name: "{{ parent_vm_folder | regex_replace('^(.*)/.*$', '\\1') }}"                     # Extract parent folder from VMFolder full path"
        state: present
      register: vm_parent_folder_creation_result


    - name: DEBUG -- Display vm_parent_folder_creation_result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================
          Variable: vm_parent_folder_creation_result
          ==========================================
          {{ vm_parent_folder_creation_result | to_nice_yaml }}
          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - vm_parent_folder_creation_result is defined
    - name: Create Child VM Folder Infra_VM_folder
      community.vmware.vcenter_folder:
        hostname: "{{ vCSA.fqdn }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        validate_certs: no
        datacenter: "{{ vCSA.datacenter }}"
        folder_type: vm
        parent_folder: "{{ parent_vm_folder | regex_replace('^(.*)/.*$', '\\1') }}"                     # Extract parent folder from VMFolder full path
        folder_name:   "{{ Infra_VM_folder | regex_replace('^(.*)/.*$', '\\1')}}"                     # Extract remaining folder name
        state: present
      register: vm_child_folder_creation_result
      when: 
        - vm_parent_folder_creation_result is defined
        - vm_parent_folder_creation_result.failed != true

    - name: DEBUG -- Display vm_child_folder_creation_result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================
          Variable: vm_child_folder_creation_result
          ==========================================
          {{ vm_child_folder_creation_result | to_nice_yaml }}
          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - vm_child_folder_creation_result is defined
    - name: Create Child VM Folder nESXi_VM_folder
      community.vmware.vcenter_folder:
        hostname: "{{ vCSA.fqdn }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        validate_certs: no
        datacenter: "{{ vCSA.datacenter }}"
        folder_type: vm
        parent_folder: "{{ parent_vm_folder | regex_replace('^(.*)/.*$', '\\1') }}"                     # Extract parent folder from VMFolder full path
        folder_name:   "{{ nESXi_VM_folder | regex_replace('^(.*)/.*$', '\\1')}}"                     # Extract remaining folder name
        state: present
      register: vm_child_folder_creation_result
      when: 
        - vm_parent_folder_creation_result is defined
        - vm_parent_folder_creation_result.failed != true

    - name: DEBUG -- Display vm_child_folder_creation_result
      ansible.builtin.pause:
        seconds: "{{ DEBUG.DisplayDelayInSeconds }}"
        prompt: |
          =================================================================================================
          Variable: vm_child_folder_creation_result
          ==========================================
          {{ vm_child_folder_creation_result | to_nice_yaml }}
          =================================================================================================
      when:
        - DEBUG.DisplayVariables == true
        - vm_child_folder_creation_result is defined        
##
###############################################################################################################
##                          Create Datacenter and Clustesr for Nested ESXi                                   ##
##                                                                                                           ##
###############################################################################################################
##

    - name: Create Datacenter
      vmware_datacenter:
        hostname: "{{ vCSA.ip }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        datacenter_name: "{{ vCSA.datacenter }}"
        state: present
        validate_certs: False

    - name: Create Clusters on vCenter
      vmware_cluster:
        hostname: "{{ vCSA.ip }}"
        username: "{{ vCSA.user }}"
        password: "{{ vCSA.password }}"
        datacenter_name: "{{ vCSA.datacenter }}"
        cluster_name: "{{ item.value.cluster }}"
        validate_certs: False
        enable_ha: False  # Hardcoded as we need to enable HA after vSAN is enabled and disks are claimed
        enable_drs: True
        enable_vsan: False  # Hardcoded as we need to enable vSAN when the hosts are added to the cluster
      with_dict: "{{ Nested_Clusters }}"